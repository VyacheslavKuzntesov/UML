#include<iostream>

using namespace std;

void main()
{
	setlocale(LC_ALL, "");

}
/*
	UML - Unified Modelling Language(Унифицированный язык моделирования) 
	UML - позволяет при помощи шрафических диаграм изображать процессы взаимодействия и архитектуры систем
	Язык UML поддержует более 10 типов диаграм но нас будет интересовать диаграммы классов(Class diagram), объектов(object diagram), Flowchart, Deploy diagram(диаграмма развертывания)
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Class diagram - на диаграмме классов представленны классы из которых состоит система а также отношения между этими классами
	Отношения между классами бывают:

	1. Ассоциация(Association) - это саммая слабая связь между классами например: машина -> водитель(ассоциация 1 к 1), студенты -> группа (ассоциация многии к одному) и студенты -> преподаватели (ассоциация многии к многим).
	Синтаксически ассоциация реализуется ввиде указателя на объект другого класа.
	
	2.Наследование(Inheritance) "is a" ("является")

	3.Агрегирование/композиция(Aggregation/Composition) - Агрегирование и композиция реализует отношение между классами типа "whole part"("часть целое") такой тип отношения ещё называется "включает"
	Например: 
	Компьтер включает в себя процессор, оперативную память, жесткий диск и прочие компоненты. Процессор, память и диск являються частями целого.
	Список включает в себя элементы. Элемент является частью списка.
	Человек включает в себя сердце, легкие, почки и так далее, тоесть сердце является частью человека
	
	Agregator - это объект который включает в себя другой объект (компьютер)
	Agregatee(включаемое) - это объект который является частью другого объекта (процессор)

	Разницца между агрегированием и композицией состоит в том что при агрегировании связь между объектами может быть разорванна безболезненно для части и целого а при композиции связь между объектами не может быть разорванна безболезненно для части и целого 
	-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Object diagram



*/